// Generated by rstantools.  Do not edit by hand.

/*
    phylopairs is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    phylopairs is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with phylopairs.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_beta_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 44> locations_array__ =
  {" (found before start of program)",
  " (in 'beta', line 20, column 2 to column 17)",
  " (in 'beta', line 21, column 2 to column 20)",
  " (in 'beta', line 47, column 2 to column 40)",
  " (in 'beta', line 48, column 2 to column 37)",
  " (in 'beta', line 51, column 4 to column 65)",
  " (in 'beta', line 50, column 17 to line 52, column 3)",
  " (in 'beta', line 50, column 2 to line 52, column 3)",
  " (in 'beta', line 25, column 2 to column 23)",
  " (in 'beta', line 26, column 2 to column 26)",
  " (in 'beta', line 28, column 9 to column 10)",
  " (in 'beta', line 28, column 2 to column 25)",
  " (in 'beta', line 30, column 9 to column 10)",
  " (in 'beta', line 30, column 2 to column 15)",
  " (in 'beta', line 40, column 4 to column 25)",
  " (in 'beta', line 39, column 31 to line 41, column 3)",
  " (in 'beta', line 39, column 9 to line 41, column 3)",
  " (in 'beta', line 38, column 4 to column 28)",
  " (in 'beta', line 37, column 31 to line 39, column 3)",
  " (in 'beta', line 37, column 9 to line 41, column 3)",
  " (in 'beta', line 35, column 6 to column 39)",
  " (in 'beta', line 34, column 19 to line 36, column 5)",
  " (in 'beta', line 34, column 4 to line 36, column 5)",
  " (in 'beta', line 33, column 31 to line 37, column 3)",
  " (in 'beta', line 33, column 9 to line 41, column 3)",
  " (in 'beta', line 32, column 4 to column 24)",
  " (in 'beta', line 31, column 24 to line 33, column 3)",
  " (in 'beta', line 31, column 2 to line 41, column 3)",
  " (in 'beta', line 44, column 2 to column 37)",
  " (in 'beta', line 7, column 2 to column 17)",
  " (in 'beta', line 8, column 2 to column 17)",
  " (in 'beta', line 9, column 26 to column 27)",
  " (in 'beta', line 9, column 2 to column 31)",
  " (in 'beta', line 10, column 9 to column 10)",
  " (in 'beta', line 10, column 12 to column 13)",
  " (in 'beta', line 10, column 2 to column 17)",
  " (in 'beta', line 11, column 2 to column 17)",
  " (in 'beta', line 12, column 2 to column 24)",
  " (in 'beta', line 13, column 2 to column 26)",
  " (in 'beta', line 14, column 2 to column 25)",
  " (in 'beta', line 15, column 2 to column 36)",
  " (in 'beta', line 20, column 9 to column 10)",
  " (in 'beta', line 47, column 9 to column 10)",
  " (in 'beta', line 48, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_beta final : public model_base_crtp<model_beta> {
private:
  int N;
  int K;
  Eigen::Matrix<double,-1,1> Y_data__;
  Eigen::Matrix<double,-1,-1> X_data__;
  double coef_mean;
  double coef_sd;
  double phi_shape;
  double phi_rate;
  int link_choice;
  Eigen::Map<Eigen::Matrix<double,-1,1>> Y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
public:
  ~model_beta() {}
  model_beta(stan::io::var_context& context__, unsigned int
             random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_beta_namespace::model_beta";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 29;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 29;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 30;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 30;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 32;
      context__.validate_dims("data initialization", "Y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      Y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&Y) Eigen::Map<Eigen::Matrix<double,-1,1>>(Y_data__.data(), N);
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 32;
        Y_flat__ = context__.vals_r("Y");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 32;
          stan::model::assign(Y, Y_flat__[(pos__ - 1)],
            "assigning variable Y", stan::model::index_uni(sym1__));
          current_statement__ = 32;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "Y", Y, 0);
      current_statement__ = 32;
      stan::math::check_less_or_equal(function__, "Y", Y, 1);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("X", "K", K);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(K)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, K,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), N, K);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 35;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 35;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 35;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 35;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 36;
      context__.validate_dims("data initialization", "coef_mean", "double",
        std::vector<size_t>{});
      coef_mean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 36;
      coef_mean = context__.vals_r("coef_mean")[(1 - 1)];
      current_statement__ = 37;
      context__.validate_dims("data initialization", "coef_sd", "double",
        std::vector<size_t>{});
      coef_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 37;
      coef_sd = context__.vals_r("coef_sd")[(1 - 1)];
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "coef_sd", coef_sd, 0);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "phi_shape", "double",
        std::vector<size_t>{});
      phi_shape = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 38;
      phi_shape = context__.vals_r("phi_shape")[(1 - 1)];
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "phi_shape", phi_shape,
        0);
      current_statement__ = 39;
      context__.validate_dims("data initialization", "phi_rate", "double",
        std::vector<size_t>{});
      phi_rate = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 39;
      phi_rate = context__.vals_r("phi_rate")[(1 - 1)];
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "phi_rate", phi_rate, 0);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "link_choice", "int",
        std::vector<size_t>{});
      link_choice = std::numeric_limits<int>::min();
      current_statement__ = 40;
      link_choice = context__.vals_i("link_choice")[(1 - 1)];
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "link_choice",
        link_choice, 1);
      current_statement__ = 40;
      stan::math::check_less_or_equal(function__, "link_choice", link_choice,
        4);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("Beta", "K", K);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("loglik", "N", N);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("mu", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = K + 1;
  }
  inline std::string model_name() const final {
    return "model_beta";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_beta_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> Beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      Beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 2;
      phi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      {
        current_statement__ = 8;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(Beta, 0, 10));
        current_statement__ = 9;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(phi, 0.01, 0.01));
        current_statement__ = 10;
        stan::math::validate_non_negative_index("eta", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> eta =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 11;
        stan::model::assign(eta, stan::math::multiply(X, Beta),
          "assigning variable eta");
        current_statement__ = 12;
        stan::math::validate_non_negative_index("mu", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> mu =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 27;
        if (stan::math::logical_eq(link_choice, 1)) {
          current_statement__ = 25;
          stan::model::assign(mu, stan::math::inv_logit(eta),
            "assigning variable mu");
        } else {
          current_statement__ = 24;
          if (stan::math::logical_eq(link_choice, 2)) {
            current_statement__ = 22;
            for (int n = 1; n <= N; ++n) {
              current_statement__ = 20;
              stan::model::assign(mu,
                stan::math::normal_cdf(
                  stan::model::rvalue(eta, "eta", stan::model::index_uni(n)),
                  0, 1), "assigning variable mu", stan::model::index_uni(n));
            }
          } else {
            current_statement__ = 19;
            if (stan::math::logical_eq(link_choice, 3)) {
              current_statement__ = 17;
              stan::model::assign(mu,
                stan::math::subtract(1,
                  stan::math::exp(stan::math::minus(stan::math::exp(eta)))),
                "assigning variable mu");
            } else {
              current_statement__ = 16;
              if (stan::math::logical_eq(link_choice, 4)) {
                current_statement__ = 14;
                stan::model::assign(mu,
                  stan::math::exp(
                    stan::math::minus(stan::math::exp(stan::math::minus(eta)))),
                  "assigning variable mu");
              }
            }
          }
        }
        current_statement__ = 28;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(Y,
                         stan::math::multiply(mu, phi),
                         stan::math::multiply(stan::math::subtract(1, mu),
                           phi)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_beta_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> Beta =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      Beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      double phi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      phi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      out__.write(Beta);
      out__.write(phi);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> loglik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      stan::model::assign(loglik, stan::math::rep_vector(0.0, N),
        "assigning variable loglik");
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      stan::model::assign(mu,
        stan::math::inv_logit(stan::math::multiply(X, Beta)),
        "assigning variable mu");
      current_statement__ = 7;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 5;
        stan::model::assign(loglik,
          stan::math::beta_lpdf<false>(
            stan::model::rvalue(Y, "Y", stan::model::index_uni(n)),
            (stan::model::rvalue(mu, "mu", stan::model::index_uni(n)) * phi),
            ((1 - stan::model::rvalue(mu, "mu", stan::model::index_uni(n))) *
            phi)), "assigning variable loglik", stan::model::index_uni(n));
      }
      out__.write(loglik);
      out__.write(mu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> Beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(Beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable Beta");
      out__.write(Beta);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 2;
      phi = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, phi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "Beta", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> Beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> Beta_flat__;
        current_statement__ = 1;
        Beta_flat__ = context__.vals_r("Beta");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(Beta, Beta_flat__[(pos__ - 1)],
            "assigning variable Beta", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(Beta);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 2;
      phi = context__.vals_r("phi")[(1 - 1)];
      out__.write_free_lb(0, phi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"Beta", "phi"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"loglik", "mu"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(K)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "Beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "phi");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "loglik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "Beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "phi");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "loglik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"Beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"loglik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"Beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"loglik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (K + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((N + N));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (K + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((N + N));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_beta_namespace::model_beta;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_beta_namespace::profiles__;
}
#endif
#endif
